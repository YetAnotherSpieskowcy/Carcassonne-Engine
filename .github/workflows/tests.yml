name: Build and test

on:
  push:
    branches:
      - main
  pull_request:

env:
  GO_VERSION: '1.22.1'
  PYTHON_VERSION: '3.12'
  BUILT_WHEELS_DIR: built_wheels

permissions: read-all
jobs:
  go-tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.GO_VERSION }}"
      - name: Install Protobuf
        run: apt update && apt install protobuf-compiler
      - name: Install gocover-cobertura
        run: |
          go get github.com/boumenot/gocover-cobertura && go install github.com/boumenot/gocover-cobertura
      # Install gotestfmt on the VM running the action.
      - name: Set up gotestfmt
        uses: GoTestTools/gotestfmt-action@v2        
      - name: Compile Protobuf
        run: protoc --proto_path=./proto --go_out=./pkg ./proto/*.proto
      - name: Run tests
        run: go test -race -json -v -coverprofile=coverage.txt ./... 2>&1 | tee /tmp/gotest.log | gotestfmt
      - name: Convert go coverage to corbetura format
        run: gocover-cobertura < coverage.txt > coverage.xml
      - name: Generate code coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: false
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '88 100'

  python-build:
    name: Python Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.GO_VERSION }}"
      - name: Setup Python "${{ env.PYTHON_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
      - name: Build Python project
        run: make build-python
      - name: Upload built wheel
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.BUILT_WHEELS_DIR }}"
          path: |
            ${{ env.BUILT_WHEELS_DIR }}

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: python-build

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
      - name: Download built wheel
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.BUILT_WHEELS_DIR }}"
          path: "${{ env.BUILT_WHEELS_DIR }}"
      - name: Install built wheel
        run: |
          make -o build-python .venv install-python
      - name: Run tests
        run: make -o install-python test-python
